// Package swagger GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/groups": {
            "post": {
                "description": "Creates new group and associated user groups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Creates Group",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestSerializers.CreateGroupForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/groups/{group_id}/add-user/{user_id}": {
            "post": {
                "description": "Adds user to specified group",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Add User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/transactions": {
            "get": {
                "description": "Gets list of transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Get Transactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Group ID",
                        "name": "group_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responseDeserializers.DeserializedTransactionList"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "description": "Creates new Transaction and related user transactions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Creates Transaction",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestSerializers.CreateTransactionForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responseDeserializers.DeserializedTransaction"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Creates new user and returns created user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Creates User",
                "parameters": [
                    {
                        "description": "Body",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requestSerializers.CreateUserForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responseDeserializers.DeserializedUserFormat"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieves User data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieves User",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "requestSerializers.CreateGroupForm": {
            "type": "object",
            "required": [
                "members",
                "name"
            ],
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "requestSerializers.CreateTransactionForm": {
            "type": "object",
            "required": [
                "amount",
                "group_id",
                "name",
                "split_map",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "group_id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "split_map": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requestSerializers.splitMapFormat"
                    }
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "requestSerializers.CreateUserForm": {
            "type": "object",
            "required": [
                "name",
                "phone_number"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "requestSerializers.splitMapFormat": {
            "type": "object",
            "properties": {
                "percent": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 0
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "responseDeserializers.DeserializedGroup": {
            "type": "object",
            "properties": {
                "is_settled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "responseDeserializers.DeserializedTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "group_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "responseDeserializers.DeserializedTransactionList": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "date": {
                    "type": "string"
                },
                "expense": {
                    "type": "string"
                },
                "group": {
                    "type": "string"
                },
                "pending": {
                    "type": "string"
                }
            }
        },
        "responseDeserializers.DeserializedUserFormat": {
            "type": "object",
            "properties": {
                "active_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responseDeserializers.DeserializedGroup"
                    }
                },
                "name": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "settled_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/responseDeserializers.DeserializedGroup"
                    }
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Splitwise clone Service",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
